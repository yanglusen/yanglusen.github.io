<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>react学习笔记-基础语法</title>
    <link href="/2022/03/29/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/03/29/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>由于ng写的枯燥无味，所以便趁着晚上无聊时间学习react，卷死你们！</p><p>此笔记是记录学习react的第一篇文章，主要学到了创建react组件的方式、jsx的基础语法以及react中的this指向问题。</p><h3 id="创建react组件的方式"><a href="#创建react组件的方式" class="headerlink" title="创建react组件的方式"></a>创建react组件的方式</h3><p>有两种方式可以创建组件：函数式组件和类组件。如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 函数式</span><br>function <span class="hljs-type">Welcome</span>(props) &#123;<br>  <span class="hljs-keyword">return</span> &lt;h1&gt;<span class="hljs-type">Hello</span>, &#123;props.name&#125;&lt;/h1&gt;;<br>&#125;<br><br><span class="hljs-comment">// 类组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> &lt;h1&gt;<span class="hljs-type">Hello</span>, &#123;<span class="hljs-keyword">this</span>.props.name&#125;&lt;/h1&gt;;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在不考虑hooks之前，类组件就是比函数组件多了state（状态）功能，适合复杂功能，当然hooks就等以后学到再说吧。</p><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>在react中使用jsx来构建界面，最终由babel编译器转为普通的js代码。</p><p>JSX全称是JavaScript XML 是对JavaScript的一种扩展。下面是几种语法：</p><ol><li><p>定义虚拟dom时，不要写引号。</p></li><li><p>标签中混入js表达式时要用{}。</p></li><li><p>样式的类名不要用class，要换成className。</p></li><li><p>内联样式，要用{{key: value}}的形式去写。</p></li><li><p>只能有一个根标签，且标签必须闭合。</p></li><li><p>标签首字母：如果是大写，则babel会以组件去解析，否则会以HTML标签去解析。</p></li><li><p>点击事件要写成 onClick={this.handleClick}的形式，onClick驼峰写法。</p></li></ol><h3 id="react中的this指向问题"><a href="#react中的this指向问题" class="headerlink" title="react中的this指向问题"></a>react中的this指向问题</h3><p>先看一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">frameWork</span>: [<span class="hljs-string">&#x27;Angular&#x27;</span>,<span class="hljs-string">&#x27;React&#x27;</span>,<span class="hljs-string">&#x27;Vue&#x27;</span>]&#125;;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-keyword">return</span> (<br>       <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">main</span>&#x27;&#125;&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;fontSize:</span>&#x27;<span class="hljs-attr">25px</span>&#x27;,<span class="hljs-attr">fontWeight:</span> &#x27;<span class="hljs-attr">bold</span>&#x27;&#125;&#125;&gt;</span>前端三大框架<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">               &#123;this.state.frameWork.map((item,index) =&gt;</span><br><span class="xml">                   (<span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">list</span>&#x27;&#125; <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>))&#125;</span><br><span class="xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>   )<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-comment">// 此处打印的this会是undefined！</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里打印的this的undefined的原因如下：</p><ol><li><p>在react中的点击事件并不是由组件类的实例直接调用的，而是由window调用的，上面的代码中的onClick是一个赋值语句，并没有运行handleClick方法，而是由window调用的，相当于 window.handleClick()</p></li><li><p>handleClick方法是类中的实例方法，在类的实例方法内部会默认启用’ use strict ‘严格模式，在严格模式下，方法内部的this就变成了undefined。</p></li></ol><p>知道了原因以后解决方法如下：</p><ol><li>利用bind方法，显示的改变this指向。在construct构造方法中加入：</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 这里的this指的是组件类的实例对象</span><br><span class="hljs-keyword">this</span>.handleClick = <span class="hljs-keyword">this</span>.handleClick.bind(<span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>利用ES6的箭头函数，箭头函数中是没有this的，内部的this是指它上一层的作用域中的this。</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> 把函数改造成箭头函数<br><span class="hljs-function"> <span class="hljs-title">handleClick</span> = <span class="hljs-params">()</span> =&gt;</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结一下用到的js的知识点：</p><ol><li><p>原型与原型链（类的继承）</p></li><li><p>this的指向问题（箭头函数中的this）</p></li><li><p>js中的严格模式</p></li><li><p>显式改变this的指向的方法（bind、call、apply的区别）</p></li></ol><p>以上。由于笔者水平有限，若有错误敬请指正，欢迎评论区留言交流~</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>react基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular中防抖的实现</title>
    <link href="/2022/02/21/angular%E4%B8%AD%E9%98%B2%E6%8A%96%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/02/21/angular%E4%B8%AD%E9%98%B2%E6%8A%96%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>在angular中的防抖主要是利用了rxjs中的debounce操作符，非常简洁方便！下面主要是介绍其三种写法，主要分为两类，不封装指令的防抖和封装成指令的防抖，其中封装成指令的防抖又有两种写法：利用@HostListener装饰器和Renderer2.listen方法。</p><h3 id="不封装指令的防抖"><a href="#不封装指令的防抖" class="headerlink" title="不封装指令的防抖"></a>不封装指令的防抖</h3><p>html</p><figure class="highlight handlebars"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;syn-margin-24&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    默认时间500ms，只有500ms以内没有事件触发才会执行。</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;syn-margin-24 label-font&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">total</span>&#125;&#125;</span><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">nz-button</span> <span class="hljs-attr">nzType</span>=<span class="hljs-string">&quot;primary&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;add($event)&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">nz-icon</span> <span class="hljs-attr">nzType</span>=<span class="hljs-string">&quot;plus&quot;</span> <span class="hljs-attr">nzTheme</span>=<span class="hljs-string">&quot;outline&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="xml">    Add</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; debounceTime &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Component,OnDestroy&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Subscription, Subject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;syn-debounce&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./debounce.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./debounce.component.scss&#x27;</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DebounceComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnDestroy</span></span>&#123;<br>  <span class="hljs-keyword">public</span> total: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">public</span> debounceTime: <span class="hljs-built_in">number</span> = <span class="hljs-number">500</span>;<br>  <span class="hljs-keyword">public</span> subscription = <span class="hljs-keyword">new</span> Subscription();<br>  <span class="hljs-keyword">public</span> subject$ = <span class="hljs-keyword">new</span> Subject();<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscription = <span class="hljs-built_in">this</span>.subject$.pipe(debounceTime(<span class="hljs-built_in">this</span>.debounceTime)).subscribe(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-built_in">this</span>.total+=<span class="hljs-number">1</span>);<br>   &#125;<br>  <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">$event: MouseEvent</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.subject$.next($event);<br>  &#125;<br>  ngOnDestroy(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscription.unsubscribe();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图</p><p><img src="/img/debounce/article-1.gif"></p><p>定义了一个“主体”Subject，它既是观察者，也可以是订阅者，每次点击事件时调用add方法，然后使用next方法发送事件，然后由于subject$同时subscribe(订阅)了事件，所以会经过rxjs的debounce运算符的处理，其接收一个number类型的值，单位ms，就是我们设置的防抖时间。</p><h3 id="指令-HostListener"><a href="#指令-HostListener" class="headerlink" title="指令-@HostListener"></a>指令-@HostListener</h3><p>在实际的项目中用到防抖的地方肯定不只有一处，所以此时我们应该封装出一个防抖的指令使用,在ng中监听dom事件的方法我所了解的有两种：@HostListener监听和Renderer2.listen方法。思路都是一样的，都是利用了rxjs，只不过就是监听元素事件的写法不同而已。</p><p>ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Subject, Subscription &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; debounceTime &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>基于rxjs的debounceTime操作符的防抖</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[synDebounceClick]&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DebounceClickDirective</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span>, <span class="hljs-title">OnDestroy</span> </span>&#123;<br>  <span class="hljs-meta">@Input</span>() debounceTime = <span class="hljs-number">500</span>;<br>  <span class="hljs-meta">@Output</span>(<span class="hljs-string">&#x27;synDebounceClick&#x27;</span>) debounceClick = <span class="hljs-keyword">new</span> EventEmitter();<br>  <span class="hljs-keyword">private</span> subject$ = <span class="hljs-keyword">new</span> Subject();<br>  <span class="hljs-keyword">private</span> subscription!: Subscription;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123; &#125;<br>  ngOnInit(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscription = <span class="hljs-built_in">this</span>.subject$.pipe(<br>      debounceTime(<span class="hljs-built_in">this</span>.debounceTime)<br>    ).subscribe(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-built_in">this</span>.debounceClick.emit(e))<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">ngOnDestroy</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscription.unsubscribe();<br>  &#125;<br>  <span class="hljs-meta">@HostListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,[<span class="hljs-string">&#x27;$event&#x27;</span>])<br>  <span class="hljs-function"><span class="hljs-title">clickEvent</span>(<span class="hljs-params">event: <span class="hljs-built_in">any</span></span>)</span> &#123;<br>    event.preventDefault();<br>    event.stopPropagation();<br>    <span class="hljs-built_in">this</span>.subject$.next(event);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导入相应的module后然后在HTML模板中使用即可</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> nz-<span class="hljs-keyword">button</span> nzType=<span class="hljs-string">&quot;primary&quot;</span> (synDebounceClick)=<span class="hljs-string">&quot;add()&quot;</span>&gt;Primary <span class="hljs-keyword">Button</span>&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="指令-Renderer2-listen"><a href="#指令-Renderer2-listen" class="headerlink" title="指令-Renderer2.listen"></a>指令-Renderer2.listen</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; debounceTime &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Subject, Subscription &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Directive, ElementRef, Renderer2, OnInit, Input, Output, EventEmitter, OnDestroy &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[synDebounceRendererClick]&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DebounceRendererDirective</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span>, <span class="hljs-title">OnDestroy</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> subject$ = <span class="hljs-keyword">new</span> Subject();<br>  <span class="hljs-keyword">private</span> subscription!: Subscription;<br>  <span class="hljs-meta">@Input</span>() debounceTime: <span class="hljs-built_in">number</span> = <span class="hljs-number">500</span>;<br>  <span class="hljs-meta">@Output</span>(<span class="hljs-string">&#x27;synDebounceRendererClick&#x27;</span>) synDebounceRendererClick = <span class="hljs-keyword">new</span> EventEmitter();<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> _elementRef: ElementRef, <span class="hljs-keyword">private</span> _renderer2: Renderer2</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscription = <span class="hljs-built_in">this</span>.subject$.pipe(debounceTime(<span class="hljs-built_in">this</span>.debounceTime))<br>    .subscribe(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-built_in">this</span>.synDebounceRendererClick.emit());<br>  &#125;<br><br>  ngOnInit(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">this</span>._renderer2.listen(<span class="hljs-built_in">this</span>._elementRef.nativeElement,<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>      e.stopPropagation();<br>      e.preventDefault();<br>      <span class="hljs-built_in">this</span>.subject$.next(e);<br>    &#125;);<br>  &#125;<br>  ngOnDestroy(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscription.unsubscribe();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>html</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> nz-<span class="hljs-keyword">button</span> nzType=<span class="hljs-string">&quot;primary&quot;</span> (synDebounceRendererClick)=<span class="hljs-string">&quot;add()&quot;</span>&gt;Primary <span class="hljs-keyword">Button</span>&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><p>以上就是我所知道的三种写法，至于@HostListener和Renderer2.listen()有什么区别我也不是很清楚多方查阅也没有得到具体的结果，我所了解的是@HostListener只能监听宿主元素，而Renderer2.listen()可以监听任意元素，如果还有其它不同请在评论区留言交流！</p><p>笔者水平有限，若有错误敬请指正，不明白的地方欢迎评论区留言交流~</p>]]></content>
    
    
    <categories>
      
      <category>Angular</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angular</tag>
      
      <tag>防抖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在js中计算字符串的像素长度</title>
    <link href="/2022/02/10/javascript%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6/"/>
    <url>/2022/02/10/javascript%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>关键点：利用Element.getBoundingClientRect()函数</p><h3 id="Element-getBoundingClientRect-介绍"><a href="#Element-getBoundingClientRect-介绍" class="headerlink" title="Element.getBoundingClientRect() 介绍"></a>Element.getBoundingClientRect() 介绍</h3><p>看一下mdn的解释：</p><blockquote><p>The Element.getBoundingClientRect() method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.</p></blockquote><p>说的是这个函数会返回一个DOMRect对象，这个对象中会包含当前dom元素的一些信息，如相对于视窗的位置、宽高等。</p><p>需要注意的是这里返回的元素的宽高是包含元素的border-width和padding的，因为盒子默认的是标准盒模型（standard box），如果设置了box-sizing：border-box的话，则获取到的宽高只包含元素内容的宽高。</p><h4 id="DOMRect对象"><a href="#DOMRect对象" class="headerlink" title="DOMRect对象"></a>DOMRect对象</h4><p>DOMRect对象描述了一个矩形的大小和位置，属性都是只读的。</p><p>通过mdn上的一个demo看一下都有哪些属性吧:</p><p>html</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><span class="hljs-section">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><p>javascript</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">let</span> elem = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-built_in">rect</span> = elem.getBoundingClientRect();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">rect</span>) &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">rect</span>[key] !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">let</span> para = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>);<br>    para.textContent  = <span class="hljs-string">`<span class="hljs-subst">$&#123; key &#125;</span> : <span class="hljs-subst">$&#123; rect[key] &#125;</span>`</span>;<br>    <span class="hljs-built_in">document</span>.body.appendChild(para);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://codepen.io/yanglusen/pen/YzEVGgq">传送门</a></p><p>运行结果如下：</p><p><img src="/img/calculate/result.png"></p><p>这里的width属性正是我们想要的元素的宽度。</p><p>这里解释下，代码里没有设置margin:8px,为什么会有8像素的margin呢，是以为codePen这个在线编辑器的body有默认的8px的margin。</p><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><p>其实知道了关键的方法代码也就出来了，如下这是ts的写法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算字符串的像素长度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>str 输入的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>fontSize 字体大小</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>输入字符串的像素长度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> getTextWidth(str: <span class="hljs-built_in">string</span>,<span class="hljs-attr">fontSize</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">number</span> &#123;<br> <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">const</span> ele = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br> ele.style.position = <span class="hljs-string">&#x27;absolute&#x27;</span>;<br> ele.style.whiteSpace = <span class="hljs-string">&#x27;nowrap&#x27;</span>;<br> ele.style.fontSize = fontSize;<br> ele.style.fontFamily = <span class="hljs-string">&#x27;inherit&#x27;</span>;<br> ele.style.opacity = <span class="hljs-string">&#x27;0&#x27;</span>;<br> ele.innerText = str;<br> <span class="hljs-built_in">document</span>.body.append(ele);<br> result = ele.getBoundingClientRect().width;<br> <span class="hljs-built_in">document</span>.body.removeChild(ele);<br> <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是字符串的字体样式如fontFamily、fontSize等都会影响其宽度的，因为我的需求中字体都是Chrome默认的，只有大小会不同，所以单独把字体大小作为形参提了出来。</p><p>笔者水平有限，若有错误敬请指正，不明白的地方也可评论区留言交流~</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ng-zorro中实现两个table同步滚动效果</title>
    <link href="/2022/01/19/ng-zorro%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AAtable%E5%90%8C%E6%AD%A5%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    <url>/2022/01/19/ng-zorro%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AAtable%E5%90%8C%E6%AD%A5%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<p>某天下午，同事向我请教了一个问题，需求是有两个table，当table存在滚动条时，在某一个table上滚动，那么另一个table也要同步滚动，巧的是我也不会，但是我闲着没事，帮着研究了一下。</p><p>技术栈是： angular8 + ng-zorro组件库</p><p>先看效果和代码：</p><p><img src="/img/ng-zorro-scroll/scroll.gif"></p><p>html代码</p><figure class="highlight handlebars"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;syn-margin-left-24&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">nz-table</span> [<span class="hljs-attr">nzData</span>]=<span class="hljs-string">&quot;leftData&quot;</span>  [<span class="hljs-attr">nzScroll</span>]=<span class="hljs-string">&quot;&#123;y: &#x27;300px&#x27;&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 95%;&quot;</span> [<span class="hljs-attr">nzShowPagination</span>]=<span class="hljs-string">false</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> &gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> &gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> &gt;</span>Address<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let data of leftData&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">data.name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">data.age</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">data.address</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">nz-table</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">nz-table</span> [<span class="hljs-attr">nzData</span>]=<span class="hljs-string">&quot;rightData&quot;</span> [<span class="hljs-attr">nzScroll</span>]=<span class="hljs-string">&quot;&#123;y: &#x27;300px&#x27;&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 95%;&quot;</span> [<span class="hljs-attr">nzShowPagination</span>]=<span class="hljs-string">false</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Address<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let data of rightData&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">data.name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">data.age</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">data.address</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">nz-table</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>ts代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; StorageUtil &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./../shared/utils/storage-util&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; AfterViewInit, Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  name?: <span class="hljs-built_in">string</span>;<br>  age?: <span class="hljs-built_in">number</span>;<br>  address?: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-dashboard&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./dashboard.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./dashboard.component.scss&#x27;</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DashboardComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">AfterViewInit</span> </span>&#123;<br>  <span class="hljs-attr">leftData</span>: Person[] = <span class="hljs-built_in">this</span>.generateItems(<span class="hljs-string">&#x27;Edward King&#x27;</span>,<span class="hljs-number">32</span>,<span class="hljs-string">&#x27;London, Park Lane no.&#x27;</span>,<span class="hljs-number">25</span>);<br>  rightData: Person[] = <span class="hljs-built_in">this</span>.generateItems(<span class="hljs-string">&#x27;John Brown&#x27;</span>,<span class="hljs-number">42</span>,<span class="hljs-string">&#x27;New York No. 1 Lake Park&#x27;</span>,<span class="hljs-number">15</span>);<br>  ngAfterViewInit(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-keyword">const</span> element = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;.ant-table-body&#x27;</span>);<br>    <span class="hljs-keyword">const</span> leftTable = element[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">const</span> rightTable = element[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">const</span> scale = (leftTable.scrollHeight - leftTable.clientHeight) / (rightTable.scrollHeight - rightTable.clientHeight);<br>    <span class="hljs-keyword">if</span> (leftTable?.scrollHeight &amp;&amp; leftTable.clientHeight &amp;&amp; leftTable?.scrollHeight &amp;&amp; leftTable.clientHeight) &#123;<br>      <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>      leftTable.addEventListener(<span class="hljs-string">&#x27;mouseover&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br>        flag = <span class="hljs-literal">false</span>;<br>        leftTable.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (!flag) &#123;<br>            rightTable.scrollTop = leftTable.scrollTop / scale;<br>            rightTable.scrollLeft = leftTable.scrollLeft;<br>          &#125;<br>        &#125;)<br>      &#125;);<br>      rightTable.addEventListener(<span class="hljs-string">&#x27;mouseover&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br>        flag = <span class="hljs-literal">true</span>;<br>        rightTable.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (flag) &#123;<br>            leftTable.scrollTop = rightTable.scrollTop * scale;<br>            leftTable.scrollLeft = rightTable.scrollLeft;<br>          &#125;<br>        &#125;)<br>      &#125;);<br>    &#125;<br>  &#125;<br>  generateItems(name: <span class="hljs-built_in">string</span>,<span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>,<span class="hljs-attr">address</span>: <span class="hljs-built_in">string</span>,<span class="hljs-attr">size</span>: <span class="hljs-built_in">number</span>): Person[] &#123;<br>    <span class="hljs-keyword">const</span> res: Person[] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>      res.push(<br>        &#123;<br>         <span class="hljs-attr">name</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span><span class="hljs-subst">$&#123;i&#125;</span>`</span>,<br>         <span class="hljs-attr">age</span>: age + i,<br>         <span class="hljs-attr">address</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;address&#125;</span><span class="hljs-subst">$&#123;i&#125;</span>`</span><br>        &#125;<br>      )<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看ts代码的第23行，querySelectAll()方法可以获取所有class名为”ant-table-body”的元素，这个class是ng-zorro框架内部的类，可以通过浏览器的审查元素看到：</p><p><img src="/img/ng-zorro-scroll/ng-zorro-scroll-1.png"></p><p>可能你会有疑问为什么我会找这个class呢？这是因为我们要监听存在滚动条的容器的scroll事件，所以自然的要找到这个容器。</p><p>现在已经把Dom找出来了，下一步就是设置让两个table的scrollTop和scrollLeft的值相同即可。</p><p>有两个需要注意的地方：</p><ol><li><p>上面的代码我们设置了个flag值，是为了防止左右两个table相互赋值导致滑动缓慢，同时也可减少浏览器的性能消耗，你可以去掉flag字段看看，滑动会变卡。</p></li><li><p>scale值是为了防止两个table的高度不一样设置的，这样的话滑动的时候两个table会同时到达底部或顶部。如果两个table的高度相同那scale就没啥意义了，加不加都一样。</p></li></ol><p>完整的思路如下：</p><ol><li><p>找到关键点，使两个table同步滚动的关键就是找到并设置两个table滚动区域的scrollTop、scrollLeft的值相同即可。</p></li><li><p>因为用的是ng-zorro框架，所以通过审查元素定位到某个div。</p></li><li><p>通过querySelectorAll()方法获取两个table的dom对象，获取dom对象的方式有很多种，在这里只能用querySelectorAll()方法。</p></li><li><p>添加监听事件，先监听mouseover再监听scroll事件。</p></li><li><p>设置两个容器的scrollTop和scrollLeft的值相同。</p></li><li><p>考虑反思有没有问题，比如两个table高度不一样等，然后再想怎么完善。</p></li></ol><p>解决该问题用到了很多基础的js的知识，比如原生的鼠标监听事件，mouseover、scroll等，还有scrollTop、scrollHeigh、clientHeight等属性的理解，由此看出有一个好的基础还是挺重要的！</p><p>以上。笔者水平有限，若有错误敬请指正，不明白的地方也可评论区留言交流~</p>]]></content>
    
    
    <categories>
      
      <category>Angular</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angular</tag>
      
      <tag>ng-zorro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css中的repeat函数的用法</title>
    <link href="/2022/01/18/css%E4%B8%AD%E7%9A%84repeat%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2022/01/18/css%E4%B8%AD%E7%9A%84repeat%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在学习css的过程中发现css是真的难，可能某一个属性就得去深究半天，不积跬步无以至千里，遇到不会的且觉着有深度的问题尽量学习记录一下吧。今天来看一下css中的repeat()函数。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>先看MDN的定义吧：</p><blockquote><p>CSS repeat() 函数表示轨道列表的重复片段，允许以更紧凑的形式写入大量显示重复模式的列或行。该函数可以用于 CSS Grid 属性中 grid-template-columns 和 grid-template-rows.</p></blockquote><p>我个人的理解: grid布局中grid-template-columns 和 grid-template-rows 两个属性分别是定义网格的列数和行数，如果定义大量的重复宽度的行或列就可以用到这个函数简化了，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs css">grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br><br>// 等同于<br><br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>,<span class="hljs-number">100px</span>);<br></code></pre></td></tr></table></figure><h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><p>定义其实不难，重点是它的语法和使用，尤其是当它与关键字结合时会有意想不到的效果。</p><p>repeat函数所有的取值如下：</p><ol><li><p>正整数长度。如 100px、10vw等</p></li><li><p>百分比，相对于网格容器块的大小的百分比。如 10%</p></li><li><p>带有 fr 单位的非负尺寸指定轨道的弹性系数。 如 1fr</p></li><li><p>max-content 关键字，代表占据网格轨道的网格项目所分配的最大内容区域的最大值。</p></li><li><p>min-content 关键字，代表占据网格轨道的网格项目所分配的最小内容区域的最小值。</p></li><li><p>auto 关键字，作为最大值，等同于 max-content。作为最小值，它代表占据网格轨道的网格项目的最小尺寸的最大值 （如同min-width/min-height所指定的)）。</p></li><li><p>auto-fill 关键字，内容自动填充，具体解释和下面的auto-fit关键字一起说。</p></li><li><p>auto-fit 关键词，内容自动适应。</p></li></ol><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ol><li>网格划分成4列，比例为1:1:1:1</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">repeat</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>fr);<br></code></pre></td></tr></table></figure><p><img src="/img/repeat/repeat-demo-1.png"></p><p><a href="https://codepen.io/yanglusen/pen/PoJXdgj">Demo传送门</a></p><ol start="2"><li>使用关键字 min-content/max-content</li></ol><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">repeat</span>(<span class="hljs-number">4</span>,<span class="hljs-built_in">min</span>-content);<br><br><span class="hljs-built_in">repeat</span>(<span class="hljs-number">4</span>,<span class="hljs-built_in">max</span>-content);<br></code></pre></td></tr></table></figure><p>1）先看min-content的代码和示例图：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid-containter&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>grid grid grid grid grid grid grid grid grid grid<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>AAAAAAAAAAAAAAAAAA<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>AAAAAAAAAAAAAAAAAA<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>AAAAAAA BBBBBB<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>AAAAA<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.grid-containter</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50vw</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">220px</span>;<br>  <span class="hljs-attribute">border</span>: solid <span class="hljs-number">2px</span> <span class="hljs-number">#000</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">4</span>,min-content);<br>  place-items: center;<br>  gap: <span class="hljs-number">5px</span>;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> transparent;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#F89427</span>;<br>  <span class="hljs-attribute">display</span>:flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例图：</p><p><img src="/img/repeat/repeat-demo-2.png"></p><p><a href="https://codepen.io/yanglusen/pen/YzrdJOE">Demo传送门</a></p><p><strong>对于min-content这个关键词我个人觉着是不太好理解的，如果看完代码和示例图有疑问的话可到文末看对于这个关键词的单独分析。</strong></p><p>2）再看max-content的代码和示例图</p><p>代码只需要改动css中的一行，把 min-content 替换成 max-content</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">grid</span>-template-<span class="hljs-built_in">columns</span>: repeat(<span class="hljs-number">4</span>,<span class="hljs-built_in">max</span>-<span class="hljs-built_in">content</span>);<br></code></pre></td></tr></table></figure><p>示例图</p><p><img src="/img/repeat/repeat-demo-2-2.png"></p><p>可以看到它们之间的区别，只有第一个div的宽度变大了，是因为此max-content取得是第一个p标签的宽度作为div的宽度。而min-content取得是最后一个p标签的宽度。</p><p>3.固定某列宽度，其它列按比例平分</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">grid</span>-template-columns: <span class="hljs-number">400</span>px repeat(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>fr);<br></code></pre></td></tr></table></figure><p><img src="/img/repeat/repeat-demo-3.png"></p><p><a href="https://codepen.io/yanglusen/pen/bGoOQLN">Demo传送门</a></p><ol start="4"><li>使用minmax函数，设置列的最大、最小值</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">4</span>, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">100px</span>, <span class="hljs-number">1</span>fr));<br></code></pre></td></tr></table></figure><ol start="4"><li>使用关键字 auto-fill/auto-fit</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(auto-fill, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">100px</span>, <span class="hljs-number">1</span>fr));<br><br>grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(auto-fit, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">100px</span>, <span class="hljs-number">1</span>fr));<br></code></pre></td></tr></table></figure><p>auto-fill</p><p><img src="/img/repeat/repeat-demo-4.png"></p><p>auto-fit</p><p><img src="/img/repeat/repeat-demo-5.png"></p><p>auto-fill和auto-fit的区别从它们的名字上就能看出来，一个是自动填充，一个是自动适应，看一下国外大佬的解释：</p><blockquote><p>auto-fill: 填充尽可能多的列。因此，只要新列可以容纳，它就会创建隐式列，因为它试图用尽可能多的列填充行。新添加的列可以也可能是空的，但它们仍将占据行中的指定空间。</p></blockquote><blockquote><p>auto-fit: 适合当前可用列的空间扩大，以便他们占用任何可用的空间。浏览器在用额外的列填充这些额外的空间之后(如自动填充) ，然后折叠空的列。</p></blockquote><p><a href="https://codepen.io/yanglusen/pen/poWYPKq">Demo传送门</a></p><p><img src="/img/repeat/repeat-demo-4-1.png"></p><p>如上图：当容器空间充足时，auto-fill会隐式的创建更多的列。</p><h3 id="min-content关键词"><a href="#min-content关键词" class="headerlink" title="min-content关键词"></a>min-content关键词</h3><p>为什么把min-content关键词单独拿出来说，我查了很多资料并没有很好的解释到位，而且我发现网上还有一些关于它的demo的理解是错误的，所以特此解释一下我的理解：</p><p>看MDN的解释：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The <span class="hljs-built_in">min</span>-content sizing keyword represents <span class="hljs-keyword">the</span> intrinsic minimum width <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> content. For <span class="hljs-keyword">text</span> content this means that <span class="hljs-keyword">the</span> content will take all soft-wrapping opportunities, becoming <span class="hljs-keyword">as</span> small <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> longest <span class="hljs-built_in">word</span>.<br></code></pre></td></tr></table></figure><p>这个是英文版的，为什么不看中文版的呢？因为中文版的内容没有及时更新，至少截止到我写这篇文章的时候是没有的。</p><p>大概的意思就是min-content 关键字表示内容固有的最小宽度，对于文本而言，最小宽度则是最长单词的宽度。懂了吗？如果一个容器内的内容是文本，如果用了min-content关键字，那么该容器的宽度则取容器内单词最长的文本的宽度，而不是单词最短的那个，这里还有一个坑就是，对于中文而言，一个字就是一个“词”，而对于英文和数字，则是根据空格来区分一个词的。比如 “HelloWorld”这是一个词。</p><p>再看上文中的例子就可以理解了吧？</p><p>以上，虽然文章标题是repeat函数，但是并不只是讲了repeat函数，笔者水平有限，若有错误敬请指正，不明白的地方也可评论区留言交流~</p><p>参考资料：</p><p><a href="https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/">Auto-Sizing Columns in CSS Grid: <code>auto-fill</code> vs <code>auto-fit</code></a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/min-content">MDN min-content</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>repeat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css中的linear-gradient函数的用法</title>
    <link href="/2021/12/30/css%E4%B8%AD%E7%9A%84linear-gradient%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2021/12/30/css%E4%B8%AD%E7%9A%84linear-gradient%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>日常工作中用到了渐变色，但是仅限于了解实现简单的效果，所以趁着有空好好学习一番。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>MDN的解释：</p><blockquote><p>CSS linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片。其结果属于&lt;gradient&gt;数据类型，是一种特别的&lt;image&gt;数据类型。</p></blockquote><p>linear-gradient其实就是相当于background-image，它创建的是背景图片而非背景色。</p><h4 id="渐变角度"><a href="#渐变角度" class="headerlink" title="渐变角度"></a>渐变角度</h4><p>渐变角度是与渐变容器中心点的垂线形成的角度。</p><h4 id="渐变线"><a href="#渐变线" class="headerlink" title="渐变线"></a>渐变线</h4><blockquote><p>渐变线由包含渐变图形的容器的中心点和一个角度来定义的。渐变线上的颜色值是由不同的点来定义，包括起始点，终点，以及两者之间的可选的中间点（中间点可以有多个）</p></blockquote><p>如下图：</p><p><img src="/img/linear-gradient/gradient-1.png"></p><p>点C为渐变容器的中心点，角度A是与过C点的垂线形成的角度，穿过中心点形成渐变角的这条线就叫做渐变角度。</p><p><strong>渐变线和渐变角度相辅相成，它们之间可以根据彼此互相计算得到。</strong></p><h4 id="起始点"><a href="#起始点" class="headerlink" title="起始点"></a>起始点</h4><blockquote><p>起始点是渐变线上代表起始颜色值的点。起始点由渐变线和过容器顶点的垂直线之间的交叉点来定义。（垂直线跟渐变线在同一象限内）</p></blockquote><h4 id="终点"><a href="#终点" class="headerlink" title="终点"></a>终点</h4><blockquote><p>终点是渐变线上代表最终颜色值的点。终点也是由渐变线和从最近的顶点发出的垂直线之间的交叉点定义的，然而从起始点的对称点来定义终点是更容易理解的一种方式，因为终点是起点关于容器的中心点的反射点。</p></blockquote><p>如下图：</p><p><img src="/img/linear-gradient/gradient-2.png"></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>先看MDN：</p><p><img src="/img/linear-gradient/gradient-3.png"></p><blockquote><p><strong>&lt;side-or-corner&gt;</strong><br>描述渐变线的起始点位置。它包含to和两个关键词：第一个指出水平位置left or right，第二个指出垂直位置top or bottom。关键词的先后顺序无影响，且都是可选的。<br>to top, to bottom, to left 和 to right这些值会被转换成角度0度、180度、270度和90度。其余值会被转换为一个以向顶部中央方向为起点顺时针旋转的角度。渐变线的结束点与其起点中心对称。</p></blockquote><blockquote><p><strong>&lt;angle&gt;</strong><br>用角度值指定渐变的方向（或角度）。角度顺时针增加。 </p></blockquote><blockquote><p><strong>&lt;linear-color-stop&gt;</strong><br>由一个<color>值组成，并且跟随着一个可选的终点位置（可以是一个百分比值或者是沿着渐变轴的<length>）</p></blockquote><blockquote><p><strong>&lt;color-hint&gt;</strong><br>颜色中转点是一个插值提示，它定义了在相邻颜色之间渐变如何进行。长度定义了在两种颜色之间的哪个点停止渐变颜色应该达到颜色过渡的中点。如果省略，颜色转换的中点是两个颜色停止之间的中点。</p></blockquote><p>太多？看不懂？没关系：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Value_definition_syntax">教你读懂MDN上的CSS语法</a></p><p>简单的总结一下语法：</p><table><thead><tr><th>值</th><th align="center">描述</th></tr></thead><tbody><tr><td>方向</td><td align="center">定义渐变色的渐变方向（角度）,其值可选，默认值是180deg（to bottom）</td></tr><tr><td>渐变色</td><td align="center">至少由两个颜色组成，每个颜色后面跟着可选参数，表示两个颜色之间渐变色的起点，如：linear-gradient(red 10%, blue 90%)，表示从起点到10%的距离为红色，10%-90%的距离为从红色渐变到蓝色，90%-终点为蓝色。每两个颜色中间还有一个可选参数，代表两个颜色转换的中点，默认50%，如10% - 90% 这段渐变距离的中点就是两个颜色的转换的中点</td></tr></tbody></table><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>列举该函数所有可能性的用法：</p><ol><li>第一个参数不写,默认180deg，从上到下渐变</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">background</span>: linear-gradient(<span class="hljs-built_in">red</span>, <span class="hljs-built_in">blue</span>);<br><br><span class="hljs-comment">// 等同于：</span><br><br><span class="hljs-built_in">background</span>: linear-gradient(<span class="hljs-number">180</span>deg, <span class="hljs-built_in">red</span>, <span class="hljs-built_in">blue</span>);<br><br><span class="hljs-built_in">background</span>: linear-gradient(to bottom, <span class="hljs-built_in">red</span>, <span class="hljs-built_in">blue</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/linear-gradient/gradient-4.png"></p><p><strong><a href="https://codepen.io/yanglusen/pen/yLzRpNR">Demo传送门</a></strong></p><ol start="2"><li>带第一个参数，45度渐变</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">45deg</span>, red, blue);<br></code></pre></td></tr></table></figure><p><img src="/img/linear-gradient/gradient-5.png"></p><p><strong><a href="https://codepen.io/yanglusen/pen/MWEPrgP">Demo传送门</a></strong></p><ol start="3"><li>渐变色后跟可选参数，表示渐变的距离</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red <span class="hljs-number">20%</span>, blue <span class="hljs-number">80%</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/linear-gradient/gradient-6.png"></p><p><strong><a href="https://codepen.io/yanglusen/pen/eYGPymx">Demo传送门</a></strong></p><ol start="4"><li>每两个渐变色之间跟可选参数，表示两个颜色间渐变的中心点</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">background</span>: linear-gradient(red <span class="hljs-number">20</span>%, <span class="hljs-number">60</span>%, blue <span class="hljs-number">80</span>%);<br></code></pre></td></tr></table></figure><p><img src="/img/linear-gradient/gradient-7.png"></p><p><strong><a href="https://codepen.io/yanglusen/pen/MWEPOLB">Demo传送门</a></strong></p><p>再解释一下，渐变中心：从上到下，20%到80%为容器的渐变距离，然后如果不设置渐变中心，默认50%，也就是说20%到80%之间距离的中心也就是两个颜色正式改变的位置，如上，我设置了渐变中心为60%的位置，也就是说红色渐变的距离长，颜色改变的慢。</p><p>以上。笔者水平有限，若有错误敬请指正，不明白的地方也可评论区留言交流~</p><p>参考资料：</p><p><a href="https://www.w3cplus.com/css3/do-you-really-understand-css-linear-gradients.html">你真的理解CSS的linear-gradient？</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/gradient/linear-gradient()">MDN—CSS linear-gradient()函数</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>linear-gradient</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
